name: Execute Osmo Tests and Publish Report

on:
  push:
    branches:
      - Osmo
  workflow_dispatch:

jobs:
  test-and-publish:
    runs-on: ubuntu-22.04

    env:
      MOBILE_OS: Android
      ANDROID_HOME: /home/runner/Android/Sdk
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
      DEVICE_NAME: pixel_4_xl
      OS_VERSION: 14
      MAIN_ACTIVITY: com.osmo.smt.MainActivity
      APP_PACKAGE: com.osmo.smt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Install unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Download Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip commandlinetools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK Platform-Tools
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"

      - name: Add Android platform-tools to PATH
        run: echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Restart adb server
        run: |
          adb kill-server
          adb start-server

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Appium v1.22.3
        run: npm install -g appium@1.22.3

      - name: Verify Appium installation
        run: appium -v

      - name: Start Appium server in background
        run: |
          nohup appium --base-path /wd/hub > appium.log 2>&1 &
          echo "Appium launched in background"
          sleep 5

      - name: Wait for Appium to become available
        run: |
          for i in {1..10}; do
            echo "Checking Appium status (attempt $i)..."
            if curl -s http://127.0.0.1:4723/wd/hub/status | grep -q "status"; then
              echo "✅ Appium is up!"
              break
            else
              echo "⏳ Appium not ready yet, retrying..."
              sleep 5
            fi
          done

      - name: Enable KVM for hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Download APK from GitHub Release
        run: |
          mkdir -p apks
          curl -L -o apks/Osmo.apk https://github.com/SingularAgency/SingularAutomationFramework/releases/download/OsmoApk/Osmo.apk

      - name: Validate APK
        run: |
          echo "Checking APK file..."
          ls -lh apks/
          file apks/Osmo.apk || { echo "Could not inspect APK"; exit 1; }
          if [ ! -f apks/Osmo.apk ]; then
            echo "APK file not found!"
            exit 1
          fi
          if ! file apks/Osmo.apk | grep -q "Zip archive data"; then
            echo "Invalid APK!"
            exit 1
          fi
          echo "APK is valid ✅"

      - name: Inspect APK to get launchable activity
        run: |
          sudo apt-get update
          sudo apt-get install -y android-sdk-build-tools
          aapt dump badging apks/Osmo.apk | grep launchable-activity

      - name: Create test runner script
        run: |
          cat > run-tests.sh <<'EOF'
          #!/bin/bash
          adb wait-for-device

          boot_completed=""
          until [ "$boot_completed" = "1" ]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            echo "Waiting for emulator to fully boot... ($boot_completed)"
            sleep 5
          done

          adb devices

          # Confirm app is installed
          adb shell pm list packages | grep com.osmo.smt

          echo "Running Osmo suite..."
          mvn clean test -DsuiteXmlFile=src/test/java/suites/osmo_test_suite.xml
          EOF
          chmod +x run-tests.sh          

      - name: Start emulator, install APK and run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          arch: x86_64
          target: google_apis
          profile: pixel_4
          disable-animations: true
          emulator-boot-timeout: 300
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: |
            adb install -r apks/Osmo.apk
            ./run-tests.sh

      - name: Terminate Emulator (Optional)
        if: always()
        run: |
          $ANDROID_HOME/platform-tools/adb -s emulator-5554 emu kill || echo "Emulator already shut down"

      - name: Copy reports to temporary directory
        if: always()
        shell: bash
        run: |
          mkdir -p /tmp/reports
          shopt -s nullglob
          cp -r AndroidAutomationReport/* /tmp/reports/ || echo "No reports to copy."
          echo "Contents of /tmp/reports:"
          ls -lR /tmp/reports/

      - name: Publish report to reports branch (with subfolder)
        if: always()
        env:
          REPORT_BRANCH: reports
          REPORT_SUBFOLDER: osmo   # Change this per app: lifescore, osmo, etc.
        run: |
          echo "Cloning $REPORT_BRANCH branch into temp directory..."
          git clone --branch $REPORT_BRANCH https://x-access-token:${secrets.GH_PAT}@github.com/SingularAgency/SingularAutomationFramework.git reports-temp || {
            echo "Branch $REPORT_BRANCH does not exist, creating it..."
            git clone https://x-access-token:${secrets.GH_PAT}@github.com/SingularAgency/SingularAutomationFramework.git reports-temp
            cd reports-temp
            git checkout --orphan $REPORT_BRANCH
            git rm -rf .
            git commit --allow-empty -m "Initial commit on $REPORT_BRANCH branch"
            git push origin $REPORT_BRANCH
            cd ..
          }
          
          cd reports-temp
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Removing old reports in $REPORT_SUBFOLDER..."
          rm -rf "$REPORT_SUBFOLDER"
          mkdir -p "$REPORT_SUBFOLDER"
          
          echo "Copying new reports into $REPORT_SUBFOLDER..."
          cp -r /tmp/reports/* "$REPORT_SUBFOLDER"/
          
          git add "$REPORT_SUBFOLDER"
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "📊 Update $REPORT_SUBFOLDER report from run $GITHUB_RUN_ID"
            git push origin $REPORT_BRANCH
          fi
